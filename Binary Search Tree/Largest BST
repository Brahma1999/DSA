Largest BST

You're given a binary tree. Your task is to find the size of the largest subtree within this binary tree that also satisfies the properties of a Binary Search Tree (BST). The size of a subtree is defined as the number of nodes it contains.

Note: A subtree of the binary tree is considered a BST if for every node in that subtree, the left child is less than the node, and the right child is greater than the node, without any duplicate values in the subtree.

Examples :

Input: root = [5, 2, 4, 1, 3]
Root-to-leaf-path-sum-equal-to-a-given-number-copy
Output: 3
Explanation:The following sub-tree is a BST of size 3
Balance-a-Binary-Search-Tree-3-copy
Input: root = [6, 7, 3, N, 2, 2, 4]

Output: 3
Explanation: The following sub-tree is a BST of size 3:

Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 105

CODE:

class NodeValue{
    int minNode;
    int maxNode;
    int maxSize;
    
    NodeValue( int minNode,int maxNode,int maxSize){
        this.minNode = minNode;
        this.maxNode = maxNode;
        this.maxSize = maxSize;
    }
}

class Solution{
    
    private static NodeValue largestBstNode(Node root){
        //postOrder traversal
        
        //if root is null
        if(root == null){
            return new NodeValue(Integer.MAX_VALUE,Integer.MIN_VALUE,0);
        }
        
        //travel left and right
        
        NodeValue left = largestBstNode(root.left);
        NodeValue right = largestBstNode(root.right);
        
        if(left.maxNode < root.data && root.data < right.minNode){
            //is BST
            return new NodeValue(Math.min(root.data,left.minNode), Math.max(root.data,right.maxNode) , left.maxSize + right.maxSize +1);
        }

        //otherwise
        return new NodeValue(Integer.MIN_VALUE ,Integer.MAX_VALUE ,Math.max(left.maxSize , right.maxSize));
        
    }
    
    // Return the size of the largest sub-tree which is also a BST
    static int largestBst(Node root)
    {
        return largestBstNode(root).maxSize; 
    }
    
}
