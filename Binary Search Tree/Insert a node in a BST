Insert a node in a BST

Given a BST(Binary Search Tree) and a key key. If the key is not present in the BST, Insert a new node with a value equal to the key into the BST. If the key is already present in the BST, don't modify the BST. Return the root of the modified BST after inserting the key. 

Note: The generated output contains the in-order traversal of the modified tree.

Examples :

Input: key = 4
     2
   /   \   
  1     3
Output: 1 2 3 4
Explanation: After inserting the node 4 Inorder traversal will be 1 2 3 4.
Input: key = 4
        2
      /   \
     1     3
             \
              6
Output: 1 2 3 4 6
Explanation: After inserting the node 4 Inorder traversal of the above tree will be 1 2 3 4 6.
Input: key = 2
     2
   /   \   
  1     3
Output: 1 2 3 
Explanation: Node with key=2 already present in BST, Inorder traversal will be 1 2 3.

CODE:

class Solution {
    // Function to insert a node in a BST.
    Node insert(Node root, int key) {
      
        //If the root is null , return a new node
        if (root == null) {
            return new Node(key);
        }
        
        //Otherwise , recur down the tree
        if(key < root.data){
            //Insert in the left subtree
            root.left = insert(root.left,key);
        }
        else if(key > root.data){
            //Insert in the right subtree
            root.right = insert(root.right,key);
        }
        
        //Return the (unchanged) node pointer
        return root;
    }
}
