Construct Binary Search Tree from Preorder Traversal


Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.


Example 1:


Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]
 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 1000
All the values of preorder are unique.


CODE:
class Solution {

    TreeNode bst(int[] inorder, int is, int ie, int[] preorder, int ps, int pe, Map<Integer, Integer> map) {

        if (is > ie || ps > pe)
            return null;
        // The root is the last element in postorder
        TreeNode root = new TreeNode(preorder[ps]);
        // Find the index of the root in inorder
        int rootIndex = map.get(preorder[ps]);

        // Number of nodes in the left subtree
        int numsLeft = rootIndex - is;

        // Recursively build left and right subtree
        root.left = bst(inorder, is, rootIndex - 1, preorder, ps + 1, ps + numsLeft, map);
        root.right = bst(inorder, rootIndex + 1, ie, preorder, ps + numsLeft + 1, pe, map);

        return root;
    }

    public TreeNode bstFromPreorder(int[] preorder) {
        int n = preorder.length;

        // Create a copy of the preorder array for inorder construction
        int[] inorder = preorder.clone();
        // Sort inorder to make it valid for a BST
        Arrays.sort(inorder);
        // Map to to store inorder elements and its index
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(inorder[i], i);
        }
        return bst(inorder, 0, n - 1, preorder, 0, n - 1, map);
    }
}
