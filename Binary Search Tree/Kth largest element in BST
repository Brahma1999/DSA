Kth largest element in BST

Given a Binary Search Tree. Your task is to complete the function which will return the kth largest element without doing any modification in the Binary Search Tree.

Examples:

Input:
      4
    /   \
   2     9
k = 2 
Output: 4
Input:
       9
        \ 
          10
k = 1
Output: 10
Input:
      4
    /   \
   2     9
k = 3 
Output: 2
Constraints:
1 <= number of nodes <= 105
1 <= node->data <= 105

CODE:

class Solution {
    
    int count =0;
    int ans;
    
    void reverseInorder(Node root , int k){
        if(root == null) return;
        
        //First visit the right child (for descending inorder)
        reverseInorder(root.right , k);
        
        //increment the count of nodes visited
        count++;
        
        //If count equals k , we have found the kth largest element
        if(count == k){
            ans = root.data;
            return;
        }
        
        //then visit the left child
        reverseInorder(root.left , k);
    }
    
    // return the Kth largest element in the given BST rooted at 'root'
    public int kthLargest(Node root, int k) {
        // if the tree is empty
        if (root == null) return -1;
        
        //Perform reverse inorder
        reverseInorder(root, k);

        return ans;
        
    }
}
