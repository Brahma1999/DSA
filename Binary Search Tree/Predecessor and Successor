Predecessor and Successor

There is BST given with the root node with the key part as an integer only. You need to find the in-order successor and predecessor of a given key. If either predecessor or successor is not found, then set it to NULL.

Note:- In an inorder traversal the number just smaller than the target is the predecessor and the number just greater than the target is the successor. 

Examples :

Input: root = [8, 1, 9, N, 4, N, 10, 3, N, N, N]
      8
    /   \
   1     9
   \      \
    4      10
   /
  3
key = 8
Output: 4 9
Explanation: In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.
Input: root = [10, 2, 11, 1, 5, N, N, N, N, 3, 6, N, 4, N, N]
      10
    /   \
   2     11
  / \
 1   5
    / \
   3   6
    \
     4
key = 11
Output: 10 -1
Explanation: In given BST, the inorder predecessor of 11 is 10 whereas it does not have any inorder successor.
Input: root = [2, 1, 3]
      2
    /   \
   1     3
key = 3
Output: 2 -1
Constraints: 
1 <= Number of nodes <= 105
1 <= key <= 107

CODE:

class Solution {
    
    static Node sucessor(Node root, int key){
        Node sucessorNode = null;
        
        //Traverse the tree
        while(root != null){
            
            //If the current node's value is greater than the key , move to the left child
            if( root.data > key){
                sucessorNode = root; //Potential successor found , update the succerNode
                root = root.left; //Move to the left subtree
            }
            //If the current node's value is less than or equal to the key , move to the right child
            else if(root.data <= key){
               root = root.right;
            }
        }
        
        return sucessorNode;
    }
    
    static Node predecessor(Node root, int key){
        
        Node predecessorNode = null;
        
        while(root != null){
            //If the current node's value is less than the key , move to the right child
            if( root.data < key ){
                predecessorNode = root; //Potential  predecessor found , update the  predecessorNode
                root = root.right; //Move to the right subtree
            }
            //If the current node's value is greater than or equal to the key , move to the right child
            else if (root.data >= key){
               root = root.left;
            }
        }
        
        return predecessorNode;
    }
    
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        
        // update pre[0] with the predecessor of the key
        pre[0] = predecessor(root,key);
        // update suc[0] with the successor of the key
        suc[0] = sucessor(root,key);
        
        
    }
} 
