Lowest Common Ancestor in a BST

Given a Binary Search Tree (with all values unique) and two node values n1 and n2 (n1!=n2). Find the Lowest Common Ancestors of the two nodes in the BST.

Examples:

Input:
              5
            /   \
          4      6
         /        \
        3          7
                    \
                     8
n1 = 7, n2 = 8
Output: 7
Input:
     2
   /   \
  1     3
n1 = 1, n2 = 3
Output: 2

Input:
     2
   /   \
  1     3
n1 = 1, n2 = 2
Output: 2
Constraints:
1 <= number of nodes <= 105
1 <= node->data <= 105
1 <= n1,n2 <= 105

CODE:
class BST {
    // Function to find the lowest common ancestor in a BST.
    Node LCA(Node root, int n1, int n2) {
        
        // If the root is null , there's no ancestor to find
        if (root == null)
            return null;

        // If both n1 and n2 are smaller than the root ,LCA must be in left subtree
        if (n1 < root.data && n2 < root.data) {
            return LCA(root.left, n1, n2);
        }

        // If both n1 and n2 are larger than the root ,LCA must be in right subtree
        if (n1 > root.data && n2 > root.data) {
            return LCA(root.right, n1, n2);
        }

        // If one of the n1 or n2 is on one side and the other on the other side
        // or, if root is one of n1 or n2, then root is the LCA
        return root;
    }
}
