Preorder Traversal and BST

Given an array arr[ ] of size N consisting of distinct integers, write a program that returns 1 if given array can represent preorder traversal of a possible BST, else returns 0.

Example 1:

Input:
N = 3
arr = {2, 4, 3}
Output: 1
Explaination: Given arr[] can represent
preorder traversal of following BST:
               2
                \
                 4
                /
               3
Example 2:

Input:
N = 3
Arr = {2, 4, 1}
Output: 0
Explaination: Given arr[] cannot represent
preorder traversal of a BST.
Your Task:
You don't need to read input or print anything. Your task is to complete the function canRepresentBST() which takes the array arr[] and its size N as input parameters and returns 1 if given array can represent preorder traversal of a BST, else returns 0.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 105
0 ≤ arr[i] ≤ 105

CODE:

class Solution {
    static int canRepresentBST(int arr[], int N) {
        //Stack to keep track of the ancestors of the current node
        Stack<Integer> stack = new Stack<>();
        
        //Variable to keep track of the last popped element (most recent root)
        int lastPoppedElement = -1;
        
        //Traverse through the array
        for(int i=0;i<N;i++) {
        
          //If the current element is smaller than the last popped element
          //It means the current element cannot be a valid node in BST's preorder
          if(arr[i] < lastPoppedElement) return 0;
          
          //Pop elements from the stack while current element is greater than
          //Element at the top of the stack ()
           while(!stack.empty() && arr[i] > stack.peek()) {
               lastPoppedElement = stack.pop();
           }
           
           //Push the current element to the stack , marking it as an ancestor for future elements
           stack.push(arr[i]);
        }
       return 1;
    }
}
