Search in a Binary Search Tree

You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

Example 1:


Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

CODE:

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {

        // Base case: If the root is null, return null
        if (root == null)
            return null;

        // If the value matches the root , return the root
        if (root.val == val)
            return root;

        // If the value is less than the root's value , search the left subtree
        if (root.val > val) {
            return searchBST(root.left, val);
        }
        // If the value is greater than the root's value , search the left subtree
        else {
            return searchBST(root.right, val);
        }

    }
}
