Sort List
Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []


CODE:
class Solution {

    //Function to get the middle element
    public ListNode getMiddleNode(ListNode head){
        ListNode slow=head;
        ListNode fast=head.next;

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    //Function to merge two sorted lists
    public ListNode mergedList(ListNode List1,ListNode List2){

        ListNode dummyNode=new ListNode(-1);
        ListNode temp=dummyNode;

        while(List1!=null && List2 !=null){
            if(List1.val<List2.val)
            {
                temp.next=List1;
                temp=List1;
                List1=List1.next;
            }else{
                temp.next=List2;
                temp=List2;
                List2=List2.next;
            }
        }
        if(List1!=null){
            temp.next=List1;
        }else{
            temp.next=List2;
        }
        return dummyNode.next;
    }

    public ListNode sortList(ListNode head) {
        
        if(head==null || head.next==null) return head;

        ListNode middleNode=getMiddleNode(head);
        ListNode left=head;
        ListNode right=middleNode.next;

        middleNode.next=null;

        left=sortList(left);
        right=sortList(right);

        return mergedList(left,right);
    
    }
}
