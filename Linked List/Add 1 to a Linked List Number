Add 1 to a Linked List Number

You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 
Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

CODE:
class Solution {
    public Node reverse(Node head){
        Node prevNode=null; //Initialize the previous node as null
        Node currNode=head; //start with the head of the list
        //Traverse the linked list
        while(currNode!=null){
            Node nextNode=currNode.next; //Store the next node
            //Reverse the current node's pointer
            currNode.next=prevNode;
            //move the previous node forward 
            prevNode=currNode;
            //move to the next node
            currNode=nextNode;
        }
        //return the new head of the reversed list
        return prevNode;
    }
    
    
    public Node addOne(Node head) {
        
        Node tempNode=reverse(head);
        Node resNode=new Node(-1);
        Node newHead=resNode;
        
        int carry=1;
        int sum;
        while(tempNode!=null)
        {
            sum= tempNode.data+carry;
            carry=(sum>=10)?1:0;
            sum=sum%10;
            
            resNode.next=new Node(sum);
            resNode=resNode.next;

            tempNode=tempNode.next;
        }
        if(carry>0)
        {
            resNode.next=new Node(carry);;
        }
        return reverse(newHead.next);
        
    }
}
