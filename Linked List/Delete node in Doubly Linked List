Delete node in Doubly Linked List
Given a Doubly Linked list and a position. The task is to delete a node from a given position (position starts from 1) in a doubly linked list and return the head of the doubly Linked list.

Examples:

Input: LinkedList = 1 <--> 3 <--> 4, x = 3
Output: 1 <--> 3
Explanation: After deleting the node at position 3 (position starts from 1),the linked list will be now as 1 <--> 3.
 
Input: LinkedList = 1 <--> 5 <--> 2 <--> 9, x = 1
Output: 5 <--> 2 <--> 9
Explanation:

Expected Time Complexity: O(n)
Expected Auxilliary Space: O(1)

CODE:
class Solution {
    
   
    public Node deleteNode(Node head, int x) {
        
       Node currNode=head;
       int size=0;
       while(currNode!=null){
           size++;
           currNode=currNode.next;
       }
       
       currNode=head;
       
       //standing at first element
       if(x==1){
           Node tempNode=head;
           head=head.next;
           head.prev=null;
           tempNode.next=null;
        
       }//standing at last element
       else if(x==size){
           while(currNode.next!=null){
               currNode=currNode.next;
           }
           Node prevNode=currNode.prev;
           currNode.prev=null;
           prevNode.next=null;
       }else{
           for(int i=1;i<x;i++){
               currNode=currNode.next;
           }
           Node prevNode=currNode.prev;
           Node nextNode=currNode.next;
           prevNode.next=nextNode;
           nextNode.prev=prevNode;
       }
       return head;
    }
}
