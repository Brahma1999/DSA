Flattening a Linked List

Given a Linked List, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked lists is in sorted order.
Flatten the Link List so all the nodes appear in a single level while maintaining the sorted order.

Note: The flattened list will be printed using the bottom pointer instead of the next pointer. Look at the printList() function in the driver code for more clarity.

Examples:

Input:

Output:  5-> 7-> 8- > 10 -> 19-> 20-> 22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation: The resultant linked lists has every node in a single level.(Note: | represents the bottom pointer.)
Input:
 
Output: 5-> 7-> 8-> 10-> 19-> 22-> 28-> 30-> 50
Explanation: The resultant linked lists has every node in a single level.(Note: | represents the bottom pointer.)
Note: In the output section of the above examples, the -> represents the bottom pointer.

Expected Time Complexity: O(n * n * m)
Expected Auxiliary Space: O(n)

Constraints:
0 <= number of nodes <= 50
1 <= no. of nodes in sub-LinkesList(mi) <= 20
1 <= node->data <= 103


CODE:
class Solution {
    Node merged(Node List1,Node List2)
    {
        Node dummyNode=new Node(-1);
        Node res=dummyNode;
        
        while(List1!=null && List2!=null){
            if(List1.data <List2.data){
                res.bottom=List1;
                res=List1;
                List1=List1.bottom;
            }else{
                res.bottom=List2;
                res=List2;
                List2=List2.bottom;
            }
            res.next=null;
        }
        if(List1!=null){
            res.bottom=List1;
        }else if(List2!=null){
            res.bottom=List2;
        }
        return dummyNode.bottom;
    }
    // Function to flatten a linked list
    Node flatten(Node head) {
        if(head==null || head.next==null) return head;
        Node mergedHead= flatten(head.next);
        return merged(head,mergedHead);
    }
}
