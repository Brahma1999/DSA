Reverse a Doubly Linked List

Given a doubly linked list. Your task is to reverse the doubly linked list and return its head.

Examples:

Input: LinkedList: 3 <-> 4 <-> 5
Output: 5 <-> 4 <-> 3

Input: LinkedList: 75 <-> 122 <-> 59 <-> 196
Output: 196 <-> 59 <-> 122 <-> 75

Expected Time Complexity: O(n).
Expected Auxiliary Space: O(1).

CODE:
class Solution {
    public DLLNode reverseDLL(DLLNode head) {
        
        //if the head is null
        if(head==null) return head;
        
        //Initialize newHead to the current head of the list
        //new head of the reversed list
        DLLNode newHead=head;
        
        //Start a pointer currNode to traverse the list
        DLLNode currNode=head;
        
        //traverse the list until we reach the end
        while(currNode!=null){
            
            //store the previous node
            DLLNode prevNode=currNode.prev;
            //reverse the next pointer of the current node
            currNode.prev=currNode.next;
            //reverse the prev pointer of the current node
            currNode.next=prevNode;
            
            
            //Update the newHead to current Node
            newHead=currNode;
            
            //move to the next node in the original list(which is now prev
            currNode=currNode.prev; //after reversal,prev points to the next node
            
        }
        
        //return new head
        return newHead;
        
        
    }
}
