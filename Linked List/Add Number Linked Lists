Add Number Linked Lists

Given two numbers, num1, and num2, represented by linked lists. The task is to return the head of the linked list representing the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.
Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.

Examples:

Input: num1 = 45 (4->5->null), num2 = 345 (3->4->5->null)
Output:  3->9->0->null  
 
Explanation: 
For the given two linked list (4 5) and (3 4 5), after adding the two linked list resultant linked list will be (3 9 0).
Input: num1 = 0063 (0->0->6->3->null), num2 = 07 (0->7->null)
Output: 7->0->null
 
Explanation: 
For the given two linked list (0 0 6 3) and (0 7), after adding the two linked list resultant linked list will be (7 0).
Expected Time Complexity: O(n+m)
Expected Space Complexity: O(max(n,m)) for the resultant list.

Constraints:
1 <= size of both linked lists <= 106
0 <= elements of both linked lists <= 99


CODE:
class Solution {
    // Function to add two numbers represented by linked list.
    
    public static Node reverseList(Node head) {
        Node prevNode=null; //Initialize the previous node as null
        Node currNode=head; //start with the head of the list
        //Traverse the linked list
        while(currNode!=null){
            Node nextNode=currNode.next; //Store the next node
            //Reverse the current node's pointer
            currNode.next=prevNode;
            //move the previous node forward 
            prevNode=currNode;
            //move to the next node
            currNode=nextNode;
        }
        //return the new head of the reversed list
        return prevNode;
    }
    
    static Node addTwoLists(Node num1, Node num2) {
        
        num1=reverseList(num1);    //reversing first node
        num2=reverseList(num2);   //reversing second node
        
        Node temp1=num1;
        Node temp2=num2;
        
        Node resNode=new Node(-1);
        Node newHead=resNode;
        int carry=0;
        
        while(temp1!=null && temp2!=null){
            
            int sum= temp1.data + temp2.data+carry;
            carry=sum/10;
            
            resNode.next=new Node(sum%10);
            resNode=resNode.next;
            
            temp1=temp1.next;
            temp2=temp2.next;
            
        }
        
        while(temp1!=null)
        {
            int sum= temp1.data + carry;
            carry=sum/10;
            
            resNode.next=new Node(sum%10);
            resNode=resNode.next;
            
            temp1=temp1.next;
           
        }
        while(temp2!=null)
        {
            int sum= temp2.data + carry;
            carry=sum/10;
            
            resNode.next=new Node(sum%10);
            resNode=resNode.next;
            
            temp2=temp2.next;
        }
        
        if(carry>0){
            resNode.next=new Node(carry);
        }
        
        return reverseList(newHead.next); 
    }
}
