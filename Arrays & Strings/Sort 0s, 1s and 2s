Sort 0s, 1s and 2s
Difficulty: EasyAccuracy: 50.58%Submissions: 694K+Points: 2
Given an array arr containing only 0s, 1s, and 2s. Sort the array in ascending order.

Examples:

Input: arr[]= [0, 2, 1, 2, 0]
Output: 0 0 1 2 2
Explanation: 0s 1s and 2s are segregated into ascending order.
Input: arr[] = [0, 1, 0]
Output: 0 0 1
Explanation: 0s 1s and 2s are segregated into ascending order.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

The Dutch National Flag algorithm (also known as the 3-way partitioning or the Lomuto partition scheme) is used to sort an array of elements into three distinct groups.  The classic example uses colors (red, white, and blue, hence the name), but it can be applied to any situation where you have three categories.

The Problem

You have an array containing elements of three types (e.g., 0, 1, and 2, or red, white, and blue).  The goal is to rearrange the array so that all elements of the first type come first, followed by elements of the second type, and then elements of the third type.  The order within each group doesn't matter.

The Algorithm (High-Level)
The Dutch National Flag algorithm uses three pointers:
low: Points to the beginning of the array. Elements to the left of low are all of the first type.
mid: Points to the current element being examined.
high: Points to the end of the array. Elements to the right of high are all of the third type.
The algorithm iterates while mid <= high:
If arr[mid] is of the first type:
Swap arr[low] and arr[mid].
Increment both low and mid.
If arr[mid] is of the second type:
Increment mid (no swap needed).
If arr[mid] is of the third type:
Swap arr[mid] and arr[high].
Decrement high (but don't increment mid yet, because the element swapped into arr[mid] hasn't been processed).


CODE:
//User function template for Java

class Solution
{
    public static void swap(int arr[], int a,int b)
    {
        int temp=arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
    
    public static void sort012(int arr[], int n)
    {
       int low=0;
       int mid=0;
       int high=n-1;
       
       while(mid<=high)
       {
           if(arr[mid]==0)
           {
               swap(arr,low,mid);
               low++;
               mid++;
           }
           else if(arr[mid]==1)
           {
               mid++;
           }else
           {
               swap(arr,high,mid);
               high--;
           }
       }
    }
}
