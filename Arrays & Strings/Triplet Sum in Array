Triplet Sum in Array

Given an array arr of size n and an integer x. Find if there's a triplet in the array which sums up to the given integer x.

Examples

Input:n = 6, x = 13, arr[] = [1,4,45,6,10,8]
Output: 1
Explanation: The triplet {1, 4, 8} in the array sums up to 13.
Input: n = 6, x = 10, arr[] = [1,2,4,3,6,7]
Output: 1
Explanation: Triplets {1,3,6} & {1,2,7} in the array sum to 10. 
Input: n = 6, x = 24, arr[] = [40,20,10,3,6,7]
Output: 0
Explanation: There is no triplet with sum 24. 
Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(1)


CODE: Binary Search
class Solution {
    // Should return true if there is a triplet with sum equal
    // to x in arr[], otherwise false
    public static boolean find3Numbers(int arr[], int n, int x) {

        // sort
        Arrays.sort(arr);
    
      for(int i=0;i<n;i++)
       {
           int rem=x-arr[i];
           int low=i+1;
           int high=n-1;
           while(low<high)
           {
               if(arr[low]+ arr[high] ==rem){
                   return true;
               }
               else if(arr[low]+ arr[high] > rem)
               {
                   high--;
               }
               else{
                   low++;
               }
           }
       }
       
       return false;
    }
}


