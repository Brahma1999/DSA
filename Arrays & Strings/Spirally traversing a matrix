Spirally traversing a matrix
Difficulty: MediumAccuracy: 35.2%Submissions: 281K+Points: 4
You are given a rectangular matrix, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: matrix[][] = [[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12],
                  [13, 14, 15,16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]

CODE:
//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int r = sc.nextInt();
            int c = sc.nextInt();

            int matrix[][] = new int[r][c];

            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) matrix[i][j] = sc.nextInt();
            }
            Solution ob = new Solution();
            ArrayList<Integer> ans = ob.spirallyTraverse(matrix);
            for (Integer val : ans) System.out.print(val + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int matrix[][]) {
        
        // Get the number of rows and columns in the matrix
        int n=matrix.length;  //rows
        int m=matrix[0].length;  //columns
        
        //Result List to store the result
        ArrayList<Integer>res=new ArrayList<>();
        
        //Initialize the boundaries for the spiral traversal
        int top = 0,bottom = n-1,left = 0,right = m-1;
          
        //Continue the traversal while the boundaries do not cross
        while(top<=bottom && left<= right){
              
              //Traverse from left to right across the top row
              for(int i=left;i<=right;i++){   
                  res.add(matrix[top][i]);
              }
              top++; //move the top boundary down
              
              //Traverse from top to bottom down the right column 
              for(int i=top;i<=bottom;i++){
                  res.add(matrix[i][right]);
              }
              right--; //move the right boundary left
              
              //Check if there are remaining rows before traversing bottom row
              if(top<=bottom){
                  
                   //Traverse from right to left across the bottom row
                  for(int i= right; i>=left; i--){
                      res.add(matrix[bottom][i]);
                  }
                  //move the bottom boundary up
                  bottom--;
              }
              
              //Check if there are remaining columns before traversing left column
               if(left<=right){
                //Traverse from bottom to top on the  the left column 
                for(int i = bottom; i>=top; i--){
                    res.add(matrix[i][left]);
                }
                //move the left boundary right
                left++;
               }
          }
          
          //Return the result
          return res;
          
        
    }
}
