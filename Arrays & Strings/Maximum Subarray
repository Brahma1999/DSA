Description:
Given an integer array nums, find the subarray with the largest sum, and return its sum.
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

CODE:
class Solution {
    public int maxSubArray(int[] nums) {
      
      //Kedane's Algorithm
      //Tracks the maximum sum of the subarray ending at the current position
        int curSum=0;
        //Tracks the maximum sum found so far across all the subarrays
        int maxSum=nums[0]; 

        for(int i=0;i<nums.length;i++)
        {
            curSum+=nums[i];
            if(curSum>maxSum)
            {
                maxSum=curSum;
            }
            if(curSum < 0)
            {
                curSum=0;
            }
        }
        return maxSum;
    }
}
