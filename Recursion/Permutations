Permutations

Given an array nums of distinct integers, return all the possible 
permutations
. You can return the answer in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


CODE:
class Solution {
    //swap function
    static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    static void getPermutations(int idx, int[] nums, List<List<Integer>> res) {
        // Base case: if the current permutation is the same length as nums,
        if (idx == nums.length) {
            //create a list to store the current permutation
            List<Integer>currPermu = new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                currPermu.add(nums[i]);
            }
            //add the current permutation to the results
            res.add(new ArrayList<>(currPermu));
            return;
        }

        // Iterate through the numbers
        for (int i = idx; i < nums.length; i++) {
            //swap the current index with the iteration index
            swap(nums,idx,i);
            //Recursively generate permutations wtih the next index
            getPermutations(idx+1,nums, res);

            //Backtrack:swap back to restore the original array
            swap(nums,idx,i);
        }
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();

        // generate permutations starting with an empty list
        getPermutations(0, nums, res);
        return res;
    }
}
