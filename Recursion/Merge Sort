Merge Sort

Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 105

CODE:
class Solution
{
    void merge(int arr[], int low, int mid, int high)
    {
        List<Integer>res=new ArrayList<>();
        
        int left=low;
        int right=mid+1;
        
        while(left<=mid && right<=high)
        {
            if(arr[left]<= arr[right]){
                res.add(arr[left]);
                left++;
            }
            else {
                res.add(arr[right]);
                right++;
            }
        }
        
        while(left<=mid){
            res.add(arr[left]);
            left++;
        }
        
        while(right<=high){
            res.add(arr[right]);
            right++;
        }
        
        for(int i=low;i<=high;i++){
            arr[i]=res.get(i-low);
        }
        
    }
    
    void mergeSort(int arr[], int low, int high)
    {
        if(low==high) return;
        
        int mid =(low+high)/2;
        
        mergeSort(arr,low,mid);
    
        mergeSort(arr,mid+1,high);
        
        merge(arr,low,mid,high);
    }
}
