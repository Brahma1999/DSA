Subsets

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

CODE:

class Solution {

    static void possibleSubsets(int idx,int[] nums,List<List<Integer>> res,List<Integer>possComb)
    {
        //Base case: if we've processed all the elements ,a dd the current combination to the result
        if(idx == nums.length){
            res.add(new ArrayList<>(possComb));
            return;
        }

        //include the current element in the subset
        possComb.add(nums[idx]);
        //recurse with the next index again
        possibleSubsets(idx+1,nums,res,possComb);

        //exclude the current element from the subset
        //backtrack to remove the last added element
        possComb.remove(possComb.size()-1); 
        //recurse with the next index again
        possibleSubsets(idx+1,nums,res,possComb); //recurse with the next index again
    }

    public List<List<Integer>> subsets(int[] nums) {

        List<List<Integer>> res= new ArrayList<>();

        possibleSubsets(0,nums,res,new ArrayList<>());

        return res;
    }
}
