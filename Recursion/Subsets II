Subsets II

Given an integer array nums that may contain duplicates, return all possible 
subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

CODE:

class Solution {

    static void findCombination(int idx,int[] nums,List<List<Integer>>res,ArrayList<Integer>possComb)
    {
        res.add(new ArrayList<>(possComb));
        //Iterate through the array starting from the current index
        for(int i=idx;i<nums.length;i++){
            
            //skip duplicates
            if(i > idx && nums[i]==nums[i-1]) continue;

            //include the current element in the combination
            possComb.add(nums[i]);
            
            //Recur with updated target and next index
            findCombination(i+1,nums,res,possComb);

            //BackTrack: remove the last added element
            possComb.remove(possComb.size() - 1);
            
        }
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);

        List<List<Integer>> res=new ArrayList<>();

        findCombination(0,nums,res,new ArrayList<>());

        return res;
    }
}
