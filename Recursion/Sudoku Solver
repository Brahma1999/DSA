Sudoku Solver

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]

CODE:

class Solution {

    //Function to check if placing ch at board[row][col] is valid
    static boolean isValid(char[][] board,int row,int col,char ch){
        //Check for ch in the current column and row
        for(int i=0;i<9;i++){
            //Check for entire column
            if(board[i][col] == ch) return false;

            //Check for entire row
            if(board[row][i] == ch) return false;

            //Check for 3x3 sub-boxe
            if(board[3 * (row/3) + i/3][3 * (col/3) + i%3 ] == ch) return false;
        }

        //If no conflicts, return true
        return true;
    }

    //Recursive function to solve the sudoku puzzle
    static boolean solve(char[][] board){
        //Iterate through each cell in the board
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){

                //If we find an empty cell 
                if(board[i][j] == '.'){

                    //Try placing number 1 to 9
                    for(char ch='1';ch <= '9'; ch++){

                        //Check if placing ch is valid
                        if(isValid(board,i,j,ch)){
                            //Place ch on the board
                            board[i][j] = ch;

                            if(solve(board) == true){
                                return true; //Puzzle Solved
                            }
                            else{
                                //Backtrack: reset the cell to empty
                                board[i][j] = '.';
                            }
                        }
                    }

                    //If no valid number can be placed ,return false
                    return false;
                }
            }
        }
        //If no empty cells are left ,the puzzle is solved
        return true;
    }

    public void solveSudoku(char[][] board) {
        solve(board);
    }
}
