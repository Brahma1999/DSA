Combination Sum
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency
 of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []


CODE:

class Solution {
 
    // Helper method to find all combinations that sum up to the target
    private void findCombinations(int idx, int[] candidates, int target,
                                   List<List<Integer>> results, List<Integer> currentCombination) {
        // If we have considered all candidates
        if (idx == candidates.length) {
            // Check if we have reached the target sum
            if (target == 0) {
                // If so, add the current combination to the results
                results.add(new ArrayList<>(currentCombination));
            }
            return;
        }
 
        // If the current candidate can be included in the combination
        if (candidates[idx] <= target) {
            // Include the candidate in the current combination
            currentCombination.add(candidates[idx]);
            // Recur with the same index to allow for repeated use of the same candidate
            findCombinations(idx, candidates, target - candidates[idx], results, currentCombination);
            // Backtrack: remove the last added candidate
            currentCombination.remove(currentCombination.size() - 1);
        }
 
        // Recur without including the current candidate
        findCombinations(idx + 1, candidates, target, results, currentCombination);
    }
 
    // Main method to find all unique combinations that sum to the target
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // List to store the results
        List<List<Integer>> results = new ArrayList<>();
        // Start finding combinations from index 0
        findCombinations(0, candidates, target, results, new ArrayList<>());
        return results;
    }
}
