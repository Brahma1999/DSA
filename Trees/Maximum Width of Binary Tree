Maximum Width of Binary Tree

Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
Example 2:


Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
Example 3:


Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).

CODE:

class Pair {
    TreeNode node;
    int num;

    Pair(TreeNode node, int num) {
        this.node = node;
        this.num = num;
    }

}

class Solution {
    public int widthOfBinaryTree(TreeNode root) {

        int maxWidth = 0;
        Queue<Pair> queue = new LinkedList<>();
        // Initialize the queue with the root node at index 0
        queue.offer(new Pair(root, 0));

        while (!queue.isEmpty()) {
            int size = queue.size();
            // The index of thr first node at this level
            int min = queue.peek().num;

            int first = 0, last = 0;

            for (int i = 0; i < size; i++) {
                Pair currPair = queue.poll();
                TreeNode currNode = currPair.node;
                int currId = currPair.num - min; // Normalize the index

                if (i == 0)
                    first = currId; // Store the first id

                if (i == size - 1)
                    last = currId; // Store the last id

                // Add the left child , if it exists , with the new index
                if (currNode.left != null) {
                    queue.offer(new Pair(currNode.left, (2 * currId + 1)));
                }

                // Add the right child , if it exists , with the new index
                if (currNode.right != null) {
                    queue.offer(new Pair(currNode.right, (2 * currId + 2)));
                }
            }

            // Calculate the width at the current level and update maxWidth
            maxWidth = Math.max(maxWidth, (last - first + 1));
        }
        return maxWidth;
    }
}



GFG VERSION CODE:
class Solution {
  // Function to get the maximum width of a binary tree.
  int getMaxWidth(Node root) {
    int max = 1;
    if (root == null) {
      return 0;
    }
    Queue<Node> queue = new LinkedList<>();
    queue.add(root);
    while (true) {
      int size = queue.size();
      if (size == 0) {
        break;
      }
      if (size > max) {
        max = size;
      }
      size = queue.size();
      while (size > 0) {
        Node ap = queue.remove();
        if (ap.left != null) {
          queue.add(ap.left);
        }
        if (ap.right != null) {
          queue.add(ap.right);
        }
        size--;
      }
    }
    return max;
  }
}
