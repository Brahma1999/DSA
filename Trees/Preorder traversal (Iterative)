Preorder traversal (Iterative)
Given a Binary tree. Find the preorder traversal of the tree without using recursion.

Example 1:

Input:
           1
         /   \
        2     3
      /  \
     4    5
Output: 1 2 4 5 3
Explanation:
Preorder traversal (Root->Left->Right) of 
the tree is 1 2 4 5 3.
Example 2

Input:
            8
          /   \
         1      5
          \    /  \
           7  10   6
            \  /
            10 6
Output: 8 1 7 10 5 10 6 6 
Explanation:
Preorder traversal (Root->Left->Right) 
of the tree is 8 1 7 10 5 10 6 6.
 

Your task:

You don't need to read input or print anything. Your task is to complete the function preOrder() which takes the root of the tree as input and returns a list containing the preorder traversal of the tree, calculated without using recursion.


Expected time complexity: O(N)
Expected auxiliary space: O(N)


CODE:
class Tree
{
    
    // Return a list containing the Preorder traversal of the given tree
    ArrayList<Integer> preOrder(Node root)
    {
        ArrayList<Integer> res=new ArrayList<>(); //Result List
        Stack<Node>st=new Stack<>(); //To keep track of nodes
        
        if(root == null) return res; //Return empty list if the tree is empty
         
        //Push th root node onto the stack
        st.push(root);
        
        //while there are node to process
        while(!st.isEmpty())
        {
            //Pop the top node from the stack
            root=st.pop();
            //add the node's data to the result
            res.add(root.data);
            
            //Push the right child first so that left child is processed next
            if(root.right != null){
                st.push(root.right);
            }
            
            //push the left child on to the stack
            if(root.left != null){
                st.push(root.left);
            }
    
        }
        return res; //return the result list
    }
    
    
}
