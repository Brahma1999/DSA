Top View of Binary Tree

Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100
Your Task:
Since this is a function problem. You don't have to take input. Just complete the function topView() that takes root node as parameter and returns a list of nodes visible from the top view from left to right.

Expected Time Complexity: O(NlogN)
Expected Auxiliary Space: O(N).

CODE:

class Pair{
        Node node;
        int line;
        
        //Constructoe for the pair class
        Pair(Node node,int line){
            this.node = node;
            this.line = line;
        }
}
class Solution {
    
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        
        ArrayList<Integer> res = new ArrayList<>(); //Result list
        if(root == null) return res;
        
        //Queue for BFS
        Queue<Pair> queue = new LinkedList<Pair>();
        //Map to store the nodes and line
        Map<Integer,Integer> map = new TreeMap<>();
        
        //Start with the root node at line 0
        queue.add(new Pair(root,0));
        
        //BFS traversal
        while(!queue.isEmpty()){
            
            //Deque the current pair
            Pair currPair = queue.remove();
            
            int currLine = currPair.line;
            Node currNode = currPair.node;
            
            //If map does not contains current line , then add current Pair to the map
            if(!map.containsKey(currLine)){
                map.put(currLine,currNode.data);
            }
            
            //If currNode's left is not null ,add left to the queue
            if(currNode.left != null){
                queue.add(new Pair(currNode.left,currLine-1));
            }
            
             //If currNode's right is not null ,add right to the queue
            if(currNode.right != null){
                queue.add(new Pair(currNode.right,currLine+1));
            }
        }
        
        //Extract the top view nodes from the map
        for(int key:map.keySet()){
            res.add(map.get(key)); //Add the node value
        }
        
        //Return result list
        return res;
    }
}

