Children Sum in a Binary Tree

Given a binary tree having n nodes. Check whether all of its nodes have a value equal to the sum of their child nodes. Return 1 if all the nodes in the tree satisfy the given properties, else it returns 0. For every node, the data value must be equal to the sum of the data values in the left and right children. Consider the data value 0 for a NULL child. Also, leaves are considered to follow the property.

Examples:

Input:
Binary tree
       35
      /  \
     20   15
    / \   / \
   15  5 10  5

Output: 1
Explanation: 
Here, every node is sum of its left and right child.
Input:
Binary tree
       1
     /   \
    4     3
   /  
  5    
Output: 0
Explanation: 
Here, 1 is the root node and 4, 3 are its child nodes. 4 + 3 = 7 which is not equal to the value of root node. Hence, this tree does not satisfy the given condition.
Input:
Binary tree
       10
      /  \
     4    6
    / \  / \
   1   3 2  4

Output: 1
Explanation: 
Here, every node is a sum of its left and right child.
Constraints:
1 <= number of nodes <= 105
0 <= node->data <= 105

CODE:

class Solution {
  // Function to check whether all nodes of a tree have the value
  // equal to the sum of their child nodes.
  public static int isSumProperty(Node root) {
    //Base case: If the node is null or it is a leaf node(no children ),return 1
    if (root == null || (root.left == null && root.right == null)) {
      return 1;
    }
    
    int leftSum = 0, rightSum = 0;
    //If the left child exists ,add its data to leftsum
    if (root.left != null) {
      leftSum = root.left.data;
    }
    //If the right child exists ,add its data to rightsum
    if (root.right != null) {
      rightSum = root.right.data;
    }
    //Check if current node data is equal to the sum of its children
    //and recursively check for the left and right child
    if ((root.data == leftSum + rightSum) && isSumProperty(root.left)==1
        && isSumProperty(root.right)==1) {
      return 1;
    } else {
      return 0;
    }

  }
}
