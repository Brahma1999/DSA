 Diameter of Binary Tree

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

Example 1:


Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:

Input: root = [1,2]
Output: 1
 

CODE:

class Solution {

    int maxDiameter ;

    public int diameterOfBinaryTree(TreeNode root) {
        maxDiameter = 0;
        //Start recursion
        computeHeight(root);

        //Return the maximum diameter
        return maxDiameter ;
    }

    private  int computeHeight(TreeNode root){
        //Base case: If the node is null , return 0
        if(root == null) return 0;

        //Recursively find the height of the left subtree
        int leftHeight = computeHeight(root.left);
        //Recursively find the height of the right subtree
        int rightHeight = computeHeight(root.right);

        //Update the maximum diameter
        maxDiameter = Math.max( maxDiameter , leftHeight + rightHeight );

        //Return the height of the current subtree
        return  Math.max(leftHeight,rightHeight) + 1 ; 
        
    }

    
}
