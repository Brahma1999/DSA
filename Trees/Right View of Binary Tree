Right View of Binary Tree

Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side. Return the right view as a list. 

Right view of following tree is 1 3 7 8.

          1
       /     \
     2        3
   /   \      /    \
  4     5   6    7
    \
     8

Examples :

Input:
       1
    /    \
   3      2
Output: 1 2
Input:
     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(Height of the Tree).

CODE:

class Pair {
    Node node;
    int row;

    Pair(Node node, int row) {
        this.node = node;
        this.row = row;
    }
}

class Solution {
    // Function to return list containing elements of right view of binary tree.
    ArrayList<Integer> rightView(Node root) {
        // add code here.
        
        ArrayList<Integer> res = new ArrayList<>();
        if (root == null)
            return res;

        // Map to store the node and row
        Map<Integer, Integer> map = new TreeMap<>();
        // Queue for BFS
        Queue<Pair> queue = new LinkedList<Pair>();

        queue.add(new Pair(root, 0));

        while (!queue.isEmpty()) {

            // Deque the current pair
            Pair currPair = queue.remove();
            Node currNode = currPair.node;
            int currRow = currPair.row;

            // If map does not contains current row, then add current Pair to the ma
            if (!map.containsKey(currRow)) {
                map.put(currRow, currNode.data);
            }

            // If currNode's right is not null ,add right to the queue
            if (currNode.right != null) {
                queue.add(new Pair(currNode.right, currRow + 1));
            }

            // If currNode's left is not null ,add left to the queue
            if (currNode.left != null) {
                queue.add(new Pair(currNode.left, currRow + 1));
            }
        }

        // Extract the top view nodes from the map
        for (int key : map.keySet()) {
            res.add(map.get(key)); // Add the node value
        }

        // Return result list
        return res;
    }
}
