Tree Boundary Traversal


Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order: 

Left boundary nodes: defined as the path from the root to the left-most node ie- the leaf node you could reach when you always travel preferring the left subtree over the right subtree. 
Leaf nodes: All the leaf nodes except for the ones that are part of left or right boundary.
Reverse right boundary nodes: defined as the path from the right-most node to the root. The right-most node is the leaf node you could reach when you always travel preferring the right subtree over the left subtree. Exclude the root from this as it was already included in the traversal of left boundary nodes.
Note: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary. 

Example 1:

Input:
        1 
      /   \
     2     3  
    / \   / \ 
   4   5 6   7
      / \
     8   9
   
Output: 1 2 4 8 9 6 7 3

Example 2:

Input:
            1
           /
          2
        /  \
       4    9
     /  \    \
    6    5    3
             /  \
            7     8

Output: 1 2 4 6 5 7 8

Expected Time Complexity: O(N). 
Expected Auxiliary Space: O(Height of the Tree).


CODE:

class Solution
{
    boolean isLeaf(Node node){
        return node.left == null && node.right == null ;
    }
    
    //Function to add Left Boundary
    void addLeftBoundary(Node node,ArrayList <Integer> res){
        Node curr = node.left; //Start from the left child of the root
        
        while(curr != null){
            if(!isLeaf(curr)){
                res.add(curr.data); //Add the data of the node if its not a leaf
            }
            
            //Move to the next node (Prefer left child first ,then right child)
            if(curr.left != null){
                curr = curr.left;
            }else{
                curr = curr.right;
            }
        }
    }
    
   
    
    //Function to add Right Boundary in Reverse
    void addRightBoundary(Node node,ArrayList <Integer> res){
        
        Node curr = node.right;//Start from the right child of the root
        
        ArrayList <Integer> temp = new ArrayList<>();
        
        while(curr != null){
            
            if(!isLeaf(curr)){
                temp.add(curr.data);//Add the data of the node if its not a leaf
            }
            
            if(curr.right != null){
                curr = curr.right;
            }else{
                curr = curr.left;
            }
        }
        
        for (int i = temp.size() - 1; i >= 0;i--) {
            res.add(temp.get(i));
        }
        
    }
    
     //Function to add Leafs
    void addLeafs(Node node,ArrayList <Integer> res){
        if(node == null) return ;
    
        //If it's a leaf , add its data to the result list
        if(isLeaf(node)){
            res.add(node.data);
            return;
        }
        
        //Recur for left and right children
        if(node.left != null){
            addLeafs(node.left , res);
        }
        
        if(node.right != null){
            addLeafs(node.right , res);
        }
    }
    
    
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList <Integer> res = new ArrayList<>();
	    
	    if(node == null) return res;
	    
	    if(!isLeaf(node)){
            res.add(node.data);
        }
	    
	    //Add the Left Boundary (excluding the leaf nodes)
	    addLeftBoundary(node,res);
	    
	    //Add the leaf nodes
	    addLeafs(node,res);
	    //Add the Right Boundary in reverse
	    addRightBoundary(node,res);
	    
	    return res;
	}
}
