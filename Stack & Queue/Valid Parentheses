Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

CODE:
class Solution {
    public boolean isValid(String s) {

        // Create an empty stack to keep track of opening brackets
        Stack<Character> stack = new Stack<Character>();

       // Loop through every character in the string
        for (char c : s.toCharArray()) {
            // If the char is an opening bracket, push it onto the stack
            if (c == '(' || c == '[' || c == '{') {
                stack.push(c);
            }
            else { // If the character is a closing bracket
                // If the stack is empty, there is no matching opening racket,so return false
                if (stack.isEmpty()) {
                    return false;
                }
                // Otherwise, get the top of the stack
                char top = stack.peek();
                if ((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')) {
                    // If it is, pop the opening bracket from the stack
                    stack.pop();
                } else { // Otherwise,the brackets don't match,so return false
                    return false;
                }
            }
        }

            return stack.isEmpty();
    }
}
