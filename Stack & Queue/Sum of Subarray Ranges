Sum of Subarray Ranges
You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
Example 2:

Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
Example 3:

Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.
 

Constraints:

1 <= nums.length <= 1000
-109 <= nums[i] <= 109


CODE:
class Solution {
    //Previous smaller or Equal Elements
    public int[] prevSmallerEqualElements(int[] arr,int n){
        int psee[]=new int[n]; //stores previous smaller or equals elements index
        psee[0]=-1;
        Stack<Integer>stack=new Stack<>();
        stack.push(0); //pushing index
        for(int i=1;i<n;i++){
            while(!stack.isEmpty() && arr[stack.peek()]>=arr[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                psee[i]=-1;
            }else{
                psee[i]=stack.peek();
            }
            stack.push(i);//pushing index
        }
        return psee;
    }
    //Next Smaller Elements
    public int[] nextSmallerElements(int[] arr,int n) {
        int nse[]=new int[n]; //stores next smaller elements index
        nse[n-1]=n;
        Stack<Integer>stack=new Stack<>();
        stack.push(n-1); //pushing index

        for(int i=n-2;i>=0;i--){

            while(!stack.isEmpty() && arr[stack.peek()]>arr[i] ){
                stack.pop();
            }
            //if the stack is empty,there is no smaller element 
            if(stack.isEmpty()){
                nse[i]=n;
            }else{
                nse[i]=stack.peek();
            }
            //push the current element onto the stack
            stack.push(i);
        }
        return nse;
    }
    //Sum of Subarray Minimums
    public long sumSubarrayMins(int[] arr,int n) {

        int psee[]=prevSmallerEqualElements(arr,n);
        int nse[]=nextSmallerElements(arr,n);

        long sum=0;
        long mod = 1000000007;

        for(int i=0;i<n;i++){
            long left = i-psee[i];
            long right = nse[i]-i;

            sum +=(left * right* arr[i]);
        }
        return sum;
    }

    //Previous Greater or Equal Elements
    public int[] prevGreaterEqualElements(int[] arr,int n){
        int pgee[]=new int[n]; //stores previous smaller or equals elements index
        pgee[0]=-1;
        Stack<Integer>stack=new Stack<>();
        stack.push(0); //pushing index
        for(int i=1;i<n;i++){
            while(!stack.isEmpty() && arr[stack.peek()]<=arr[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                pgee[i]=-1;
            }else{
                pgee[i]=stack.peek();
            }
            stack.push(i);//pushing index
        }
        return pgee;
    }
    //Next Greater Elements
    public int[] nextGreaterElements(int[] arr,int n) {
        int nge[]=new int[n]; //stores next smaller elements index
        nge[n-1]=n;
        Stack<Integer>stack=new Stack<>();
        stack.push(n-1); //pushing index

        for(int i=n-2;i>=0;i--){

            while(!stack.isEmpty() && arr[stack.peek()]<arr[i] ){
                stack.pop();
            }
            //if the stack is empty,there is no smaller element 
            if(stack.isEmpty()){
                nge[i]=n;
            }else{
                nge[i]=stack.peek();
            }
            //push the current element onto the stack
            stack.push(i);
        }
        return nge;
    }
    //Sum of Subarray Maximums
    public long sumSubarrayMaxs(int[] arr,int n) {

        int pgee[]=prevGreaterEqualElements(arr,n);
        int nge[]=nextGreaterElements(arr,n);

        long sum=0;
        long mod = 1000000007;

        for(int i=0;i<n;i++){
            long left = i-pgee[i];
            long right = nge[i]-i;

            sum +=(left * right * arr[i] );
        }
        return sum;
    }
 
    public long subArrayRanges(int[] arr) {
        int n=arr.length;

        long sumSubarrayMinimum=sumSubarrayMins(arr,n);
        long sumSubarrayMaximum=sumSubarrayMaxs(arr,n);

        return ( sumSubarrayMaximum - sumSubarrayMinimum );
    }
}
