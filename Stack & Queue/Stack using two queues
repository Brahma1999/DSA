Stack using two queues
Difficulty: EasyAccuracy: 51.4%Submissions: 144K+Points: 2
Implement a Stack using two queues q1 and q2.

Example 1:

Input:
push(2)
push(3)
pop()
push(4)
pop()
Output: 2 4
Explanation:
push(2) the stack will be {2}
push(3) the stack will be {2 3}
pop()   poped element will be 3 the 
        stack will be {2}
push(4) the stack will be {2 4}
pop()   poped element will be 4  
Example 2:

Input:
push(2)
pop()
pop()
push(3)
Output: 2 -1
Your Task:

Since this is a function problem, you don't need to take inputs. You are required to complete the two methods push() which takes an integer 'x' as input denoting the element to be pushed into the stack and pop() which returns the integer poped out from the stack(-1 if the stack is empty).

Expected Time Complexity: O(1) for push() and O(N) for pop() (or vice-versa).
Expected Auxiliary Space: O(1) for both push() and pop().

Constraints:
1 <= Number of queries <= 100
1 <= values of the stack <= 100

CODE:
class Queues
{
    Queue<Integer> q1 = new LinkedList<Integer>();
    Queue<Integer> q2 = new LinkedList<Integer>();
    
    //Function to push an element into stack using two queues.
    void push(int a)
    {
        //Move all the elements from q1 to q2
	    while(!q1.isEmpty())
	    {
	        q2.add(q1.poll()); 
	    }
	 
	    //add the new element to q1
	    q1.add(a);
	    
	    //move all elements back to q1 from q2
	    while(!q2.isEmpty())
	    {
	        q1.add(q2.poll());
	    }
	    
	    //at this point ,q1 has the new element at the front ,maintaing stack order
    }
    
    //Function to pop an element from stack using two queues. 
    int pop()
    {
	    if(q1.isEmpty()) return -1;
        
	    return q1.poll();
    }
	
}
