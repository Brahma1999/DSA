Remove K Digits
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

CODE:
class Solution {
    public String removeKdigits(String num, int k) {
        int n=num.length();
       
        //If n==k ,return "0"
        if(n==k) return "0";

        Stack<Character>stack=new Stack<>();
        for(int i=0;i<n;i++){
            char currNum = num.charAt(i);
            
            // while the stack is not empty,
            // the top element is greater than the current character

            while(!stack.isEmpty() && stack.peek()> currNum && k > 0){
                stack.pop();
                k--;
            }
            stack.push(currNum);
        }

        //If there are still digits ti remove, remove from the end
        while(k>0 && !stack.isEmpty()){
            stack.pop();
            k--;
        }

        //Build the result string from the stack
        StringBuilder res=new StringBuilder();
        for(char c:stack){
            res.append(c);
        }

        //remove leading zeros
        while(res.length()>0 && res.charAt(0)=='0'){
            res.deleteCharAt(0);
        }

        //if the result is empty, return "0"
        return res.length()==0? "0" :res.toString();

    }
}
