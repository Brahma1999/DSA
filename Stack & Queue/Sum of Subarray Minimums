Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.
Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444
Constraints:

1 <= arr.length <= 3 * 104
1 <= arr[i] <= 3 * 104

CODE:
class Solution {
    public int[] prevSmallerEqualElements(int[] arr,int n) {
        int psee[]=new int[n];
        psee[0]=-1; //the first element has no previous element

        Stack<Integer>stack=new Stack<>();
        stack.push(0);
        for(int i=1;i<n;i++)
        {
            while(!stack.isEmpty() && arr[stack.peek()]>arr[i]){
                stack.pop();
            }
            //if stack is empty ,it means no smaller or equal element was found
            if(stack.isEmpty()){
                psee[i]=-1;
            }else{
                psee[i]=stack.peek(); //this is the previous smaller or equal element
            }
            //push the current element
            stack.push(i);
        }
        return psee;
    }

    public int[] nextSmallerElements(int[] arr,int n) {
        int nse[]=new int[n];
        nse[n-1]=n; //last element has no next smaller element

        Stack<Integer>stack=new Stack<>();
        stack.push(n-1);

        for(int i=n-2;i>=0;i--)
        {
            while(!stack.isEmpty() && arr[stack.peek()]>=arr[i]){
                stack.pop();
            }
            //if the stack is empty,there is no smaller element 
            if(stack.isEmpty()){
                nse[i]=n;
            }else{
                nse[i]=stack.peek();
            }

            //push the current element onto the stack
            stack.push(i);
        }
        return nse;
    }

    public int sumSubarrayMins(int[] arr) {
        int n=arr.length;
        
        int psee[]=prevSmallerEqualElements(arr,n);
        int nse[]=nextSmallerElements(arr,n);

        long sum=0;
        long mod = 1000000007;;

        for(int i=0;i<n;i++){
            long left = psee[i]==-1 ? i+1 : i-psee[i];
            long right = nse[i]-i;

            sum =(sum+ left * right % mod * arr[i] % mod)%mod;
        }
        return (int)sum;
    }
}
