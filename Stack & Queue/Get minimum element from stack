Get minimum element from stack
You are given N operations and your task is to Implement a Stack in which you can get a minimum element in O(1) time.

Example 1:
Input:
push(2)
push(3)
pop()
getMin()
push(1)
getMin()
Output: 2 1
Explanation: In the first test case for
query 
push(2)  Insert 2 into the stack.
         The stack will be {2}
push(3)  Insert 3 into the stack.
         The stack will be {2 3}
pop()    Remove top element from stack 
         Poped element will be 3 the
         stack will be {2}
getMin() Return the minimum element
         min element will be 2 
push(1)  Insert 1 into the stack.
         The stack will be {2 1}
getMin() Return the minimum element
         min element will be 1
Your Task:
You are required to complete the three methods push() which takes one argument an integer 'x' to be pushed into the stack, pop() which returns an integer popped out from the stack, and getMin() which returns the min element from the stack. (-1 will be returned if for pop() and getMin() the stack is empty.)

Expected Time Complexity: O(1) for all the 3 methods.
Expected Auxiliary Space: O(1) for all the 3 methods.

Constraints:
1 <= Number of queries <= 100
1 <= values of the stack <= 100

CODE:
class GfG
{
    int minEle;
    Stack<Integer> s;
    
    // Constructor    
    GfG()
	{
	    s = new Stack<>();
	}
	
    /*returns min element from stack*/
    int getMin()
    {
        // If the stack is empty, return -1
        if (s.isEmpty()) return -1;
        
        return minEle; // minEle always holds the minimum element
    }
    
    /*returns poped element from stack*/
    int pop()
    {
	  if (s.isEmpty()) return -1;
	  
	  int top = s.pop(); // Get and remove the top element from stack

        // If the popped element is less than the current minEle, it means this element was the encoded one
        if (top < minEle) {
            int originalMin = minEle;
            // Recover the previous minimum value
            minEle = 2 * minEle - top;
            return originalMin;
        } else {
            // If the top element wasn't encoded, just return it
            return top;
        }
	   
    }

    /*push element x into the stack*/
    void push(int x)
    {
      // If stack is empty, set x as minEle and push it to the stack
      if(s.isEmpty()){
          minEle=x;
          s.push(x);
      }
      // If x is less than the current minEle, store a modified value and update minEle
      else if (x < minEle) {
            s.push(2 * x - minEle); // Push a modified value
            minEle = x; // Update minEle to the new minimum value
        } 
        // If x is not less than minEle, just push x
        else {
            s.push(x);
        }
      
      
    }	
}
