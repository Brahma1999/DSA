Largest Rectangle in Histogram
Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.


Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 
CODE:

class Solution {

    public static int[] prevSmallest(int[] heights,int n){
        int ps[]=new int[n];
        ps[0]=-1;
        //stores index of previous smallest elements
        Stack<Integer>stack=new Stack<>();
        stack.push(0);

        for(int i=1;i<n;i++){
            while(!stack.isEmpty() && heights[stack.peek()]>=heights[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                ps[i]=-1;
            }else{
                ps[i]=stack.peek();
            }
            stack.push(i);
        }
        return ps;
    }

    public static int[] nextSmallest(int[] heights,int n){
        int ns[]=new int[n];
        ns[n-1]=n;
        //stores index of next smallest elements
        Stack<Integer>stack=new Stack<>();
        stack.push(n-1);

        for(int i=n-2;i>=0;i--){
            while(!stack.isEmpty() && heights[stack.peek()]>heights[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                ns[i] = n;
            }else{
                ns[i] = stack.peek();
            }
            stack.push(i);
        }
        return ns;
    }

    public int largestRectangleArea(int[] heights) {
        int n=heights.length;

        int ps[]=prevSmallest(heights,n);
        int ns[]=nextSmallest(heights,n);

        int largeRect=0;

        for(int i=0;i<n;i++){
            int width= ns[i] - ps[i] - 1;

            largeRect=Math.max(largeRect, heights[i]*width );

        }

        return largeRect;
    }
}
