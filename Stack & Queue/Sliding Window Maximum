Sliding Window Maximum

Given an array arr[] and an integer k. Find the maximum for each and every contiguous subarray of size k.

Examples:

Input: k = 3, arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6]
Output: [3, 3, 4, 5, 5, 5, 6] 
Explanation: 
1st contiguous subarray = [1 2 3] max = 3
2nd contiguous subarray = [2 3 1] max = 3
3rd contiguous subarray = [3 1 4] max = 4
4th contiguous subarray = [1 4 5] max = 5
5th contiguous subarray = [4 5 2] max = 5
6th contiguous subarray = [5 2 3] max = 5
7th contiguous subarray = [2 3 6] max = 6

Input: k = 4, arr[] = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13]
Output: [10, 10, 10, 15, 15, 90, 90]
Explanation: 
1st contiguous subarray = [8 5 10 7], max = 10
2nd contiguous subarray = [5 10 7 9], max = 10
3rd contiguous subarray = [10 7 9 4], max = 10
4th contiguous subarray = [7 9 4 15], max = 15
5th contiguous subarray = [9 4 15 12], max = 15
6th contiguous subarray = [4 15 12 90], max = 90
7th contiguous subarray = {15 12 90 13}, max = 90
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(k)

CODE:

class Solution {
    // Function to find maximum of each subarray of size k.
    public ArrayList<Integer> max_of_subarrays(int k, int arr[]) {
        int n=arr.length;
        
        ArrayList<Integer>res=new ArrayList<>();  //Store maximums
        Deque<Integer> deque = new ArrayDeque<>(); //Store indices of array elements
        
        int left=0;    //left end of the window
        int right=0;  // right end of the window
        
        while(right<n)
        {
            int currNum=arr[right];
            
            //Remove elements from the back of the deque if they are smaller than the current number
            while(deque.size() > 0 && deque.peekLast() < currNum ){
                deque.pollLast();  //remove the smaller elements
            }
            
            //Add the current number to the deque
            deque.addLast(currNum);
            
            //window size is not reached just increment right
            if((right-left+1) < k ){
                right++; //expand the window
            }
            else{
                
                //window size is reached
                //add the maximum (front of the deque) to the result
                res.add(deque.peekFirst());
                
                //If the maximum element is the same as the left most element , remove it
                if(deque.peekFirst()== arr[left]){
                    deque.pollFirst();  //slide the window
                }
                
                //slide window to the right
                left++;
                right++;
            }
        }
        return res;  //return the list of maximums
    }
}
