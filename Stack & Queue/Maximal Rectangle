Maximal Rectangle
Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
Example 1:

Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

CODE:

class Solution {

    public static int[] prevSmallest(int[] heights,int n){
        int ps[]=new int[n];
        ps[0]=-1;
        //stores index of previous smallest elements
        Stack<Integer>stack=new Stack<>();
        stack.push(0);

        for(int i=1;i<n;i++){
            while(!stack.isEmpty() && heights[stack.peek()]>=heights[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                ps[i]=-1;
            }else{
                ps[i]=stack.peek();
            }
            stack.push(i);
        }
        return ps;
    }

    public static int[] nextSmallest(int[] heights,int n){
        int ns[]=new int[n];
        ns[n-1]=n;
        //stores index of next smallest elements
        Stack<Integer>stack=new Stack<>();
        stack.push(n-1);

        for(int i=n-2;i>=0;i--){
            while(!stack.isEmpty() && heights[stack.peek()]>heights[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                ns[i] = n;
            }else{
                ns[i] = stack.peek();
            }
            stack.push(i);
        }
        return ns;
    }

    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int ps[]=prevSmallest(heights,n);
        int ns[]=nextSmallest(heights,n);

        int largeRect=0;

        for(int i=0;i<n;i++){
            int width= ns[i] - ps[i] - 1;
            largeRect=Math.max(largeRect, heights[i]*width );
        }

        return largeRect;
    }
    
    public int[][] prefixSumMatrix(char[][] mat ){
        int row=mat.length;  //rows
        int col=mat[0].length; //columns
        int[][] preSumMat=new int[row][col];
        for(int j=0;j<col;j++){
            int sum=0;
            for(int i=0;i<row;i++){
                //convert char '0' and '1' to int
                int currValue = mat[i][j]-'0';

                sum+=currValue;
                if(currValue == 0){
                    sum=0;
                }
                preSumMat[i][j]=sum;
            }
        }
        return preSumMat;
    }

    public int maximalRectangle(char[][] mat) {
        int[][] preSumMat=prefixSumMatrix(mat);

        int n=preSumMat.length;
        int largestRect=0;
        for(int i=0;i<n;i++){
            largestRect=Math.max(largestRect,largestRectangleArea(preSumMat[i]));
        }
        return largestRect;
    }
}
