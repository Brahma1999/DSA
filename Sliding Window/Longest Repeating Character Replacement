Longest Repeating Character Replacement

You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achieve this answer too.


CODE:
class Solution {
    public int characterReplacement(String s, int k) {
        int n=s.length();
        //HashMap to store the characters frequency
        HashMap<Character,Integer>map=new HashMap<>();
        //left and right pointer for sliding window
        int left=0;
        int right=0;
        int maxFreq=0; //Stores maximum frequency of characters
        int maxLength=0;  //Stores longest substring length

        while(right < n)
        {
            char currChar=s.charAt(right); //current character 
            //Adds current to the map 
            map.put(currChar,map.getOrDefault(currChar,0)+1);
            //the maximum frequncy of characters
            maxFreq=Math.max(maxFreq,map.get(currChar));

            int currWindow=right-left+1; //current window size 

            if(currWindow-maxFreq >k){  //checks the condition
                char leftChar=s.charAt(left);  //left character
                map.put(leftChar,map.get(leftChar)-1);
                left++;  //trim the window
            }
            if(currWindow-maxFreq <= k){
                maxLength=Math.max(maxLength,currWindow); //get the max length
            }
            right++; //increase the window
        }
        return maxLength;
    }
}
