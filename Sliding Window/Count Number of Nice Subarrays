Count Number of Nice Subarrays

Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.
Return the number of nice sub-arrays.
Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16


CODE:
class Solution {
    public static int atMost(int[] nums, int k){
        int n=nums.length; //length of input array
        int left=0;   //left pointer
        int right=0;  //right pointer
        int oddCount=0; //odd number count
        int subArrayCount=0; //count of nice subarrays
        while(right<n)
        {
            //increment odd count if current number is odd
            if(nums[right]%2 != 0){
                oddCount++;
            }

            //shrink the window from left if oddCount exceeds k
            while(oddCount>k && left<n){
                //decrement oddCount if the left number is odd
                if(nums[left]%2 != 0){ 
                    oddCount--; 
                }
                left++;  //move the left pointer to the right
            }
            //count the number of valid subarrays ending at right
            subArrayCount+=(right-left+1);
            right++;//move the right pointer forward
        }
        return subArrayCount;
    }

    public int numberOfSubarrays(int[] nums, int k) {
        //calculate the number of subarrays with at most k odd numbers
        //and substract the number with atmost k-1 odd numbers
        return atMost(nums,k)-atMost(nums,k-1);
    }
}
