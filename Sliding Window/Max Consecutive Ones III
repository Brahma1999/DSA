Max Consecutive Ones III

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length


CODE:
class Solution {
    public int longestOnes(int[] nums, int k) {
        int leftIndex=0;
        int rightIndex=0;
        int maxLength=0;
        int zeros=0;

        while(rightIndex<nums.length)
        {
            //Count of number of zeros
            if(nums[rightIndex]==0) {
                zeros++;
            }

            //if zeros count is more than k
            while(zeros>k){
                if(nums[leftIndex]==0){
                    //reduce the zeros count
                    zeros--;
                }
                //move the left index
                leftIndex++;
            }

            if(zeros<=k){
                //while zeros count is less than k , keep calculating the substring length
                maxLength=Math.max(maxLength,rightIndex-leftIndex+1);
            }

            //increse the right index pointer
            rightIndex++;

        }
        //Return max length
        return maxLength;
    }
}
