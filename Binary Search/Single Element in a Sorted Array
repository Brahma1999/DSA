Single Element in a Sorted Array

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

CODE:
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
        //Edge cases
        if(n==1) return nums[0];  // If there is only one element ,return it.
        //Check if the first element is the unique one
        if(nums[0]!=nums[1]) return nums[0];  
        //Check if the last element is the unique one
        if(nums[n-1]!=nums[n-2]) return nums[n-1]; 

        int start=1;  //starting index
        int end=n-2;  //end index
        
        //Binary Search
        while(start<=end){
            int mid=start+(end-start)/2;

            //check is mid is the unique element
            if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]){
                return nums[mid];
            }
            //Determine which half to continue search in
            if((mid%2==1 && nums[mid-1]==nums[mid])||(mid%2==0 && nums[mid]==nums[mid+1])){
              //if mid is odd and matches the left ,or mid is even and matches the right
              //search in the right half
                start=mid+1;
            }
            //Otherwise, search in the left half
            else {
                end=mid-1;
            }
        }
        //if no single element is found 
        return -1;
    }
}
