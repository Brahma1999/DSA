Search a 2D Matrix

You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

CODE:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        int row=matrix.length;
        int col=matrix[0].length;

        int start =0; //start index for binary search
        int end = row*col -1;   //ending index for binary search

        while(start<=end)
        {
            int mid = start + (end-start)/2;

            //Convert mid index to 2D coordinates
            int currRow=mid/col;   //current row
            int currCol=mid%col;   //current column
            int currNum=matrix[currRow][currCol]; //current number

            if(currNum == target){
                return true;  //target found
            }
            else if(currNum < target){
                start=mid+1;    //search in the right half
            }
            else{
                end=mid-1;      //search in the left half
            }
        }
        return false;   //target not found
    }
}
