Search in Rotated Sorted Array II

There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Input: nums = [1,1,1,1,1,1,1], target = 2
Output: false

CODE:
class Solution {
    public boolean search(int[] nums, int target) {
        int n=nums.length;
        int start=0;  //start index
        int end=n-1;  // end index

        //Start binary search 
        while(start<=end){
            //calculate the mid index
            int mid=start+(end-start)/2;

            //check if the mid element is the target
            if(nums[mid]==target) return true;

            
            //Handle Duplicates : skip duplicates
            if(nums[start]==nums[mid] && nums[mid]==nums[end]){
                start++; 
                end--;
            }
            
            // Check if the left half is sorted
            else if(nums[start]<= nums[mid]){

                //Check if target lies within the sorted left half
                if(nums[start]<=target && target < nums[mid] ){
                    end=mid-1; //search in the left half
                }else{
                    start=mid+1; //search in the right half
                }
            }
            // Check if the right half is sorted
            else{

                //Check if target lies within the sorted right half
                if(nums[mid]<= target && target<=nums[end]){
                    start=mid+1;//search in the right half
                }else{
                    end=mid-1;//search in the left half
                }
            }
        }
        return false; //Target not found
    }
}


