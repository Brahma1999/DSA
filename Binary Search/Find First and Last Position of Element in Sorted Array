Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

CODE:
class Solution {
    public int lowerBound(int[] nums, int target) {
        //Using Lower Bound Algorithm of Binary Search
        int n=nums.length;
        int start=0; //start index
        int end=n-1;  //end index
        int ans=n;   //Default answer is n (insert at the end if not found)
        //Binary Search Loop
        while(start<=end)
        {
            int mid =start + (end-start)/2; //calculate mid index
            //check if the middle is greater or equal to target
            if(nums[mid]>=target){
                ans=mid; //update the answer to mid
                end=mid-1; //move end pointer left
            }else{
                start=mid+1; //move start pointer right
            } 
        }
        return ans; //return the index where the target should be inserted
    }

    public int upperBound(int[] nums, int target) {
        //Using Upper Bound Algorithm of Binary Search
        int n=nums.length;
        int start=0; //start index
        int end=n-1;  //end index
        int ans=n;   //Default answer is n (insert at the end if not found)
        //Binary Search Loop
        while(start<=end)
        {
            int mid =start + (end-start)/2; //calculate mid index

            //check if the middle is greater or equal to target
            if(nums[mid]>target){
                ans=mid; //update the answer to mid
                end=mid-1; //move end pointer left
            }else{
                start=mid+1; //move start pointer right
            } 
        }
        return ans; //return the index where the target should be inserted
    }

    public int[] searchRange(int[] nums, int target) {
        int lb=lowerBound(nums,target);
        if(lb==nums.length || nums[lb]!=target){
            return new int[] {-1,-1};
        }

        int ub=upperBound(nums,target)-1;
        return new int[] {lb,ub};
    }
}
