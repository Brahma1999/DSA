Koko Eating Bananas

Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23


CODE:
class Solution {

    public int minRateToEat(int[] piles, int hourly){
        int res=0;
        for(int pile:piles){
            res+= Math.ceil((double)pile/hourly); //Ensure division is done in double
        }
        return res;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int max=0;
        for(int pile:piles){
            max=Math.max(max,pile);
        }
        int start=1;
        int end=max;

        while(start<=end){
            int mid=start+(end-start)/2;
            int totalH=minRateToEat(piles,mid);
            if(totalH <= h){
                end=mid-1; //Found a valid speed , try for a lower speed
            }else
            {
                start=mid+1; //Speed too low, try a higher speed
            }
        }
        return start; //The minimum speed that allows eating in h hours
    }
}
