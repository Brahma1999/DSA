Split Array Largest Sum

Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.

CODE:
class Solution {
       static int numberOfSubar(int []a, int maxSumInASingleAr){
        int num = 1;
        int s = 0;
        for(int i=0;i<a.length;i++){
            if(a[i]+s <= maxSumInASingleAr){
                s+=a[i];
            }else{
                num++;
                s = a[i];
            }
        }
        return num;
    }

    public int splitArray(int[] arr, int K) {
        int N=arr.length;
        int sum = 0;
        int max = Integer.MIN_VALUE;
        
        for(int i: arr){
            sum += i;
            max = Math.max(max, i);
        }
        
        int low = max;
        int high = sum;
        
        while(low<=high){
            int mid = (low+high)/2;
            if(numberOfSubar(arr,mid)<=K){
                high = mid-1;
            }
            else
                low = mid+1;
        }
        return low;

    }
}
