Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4

CODE:
class Solution {
    public int searchInsert(int[] nums, int target) {
        //Using Lower Bound Algorithm of Binary Search
        int n=nums.length;
        int start=0; //start index
        int end=n-1;  //end index
        int ans=n;   //Default answer is n (insert at the end if not found)

        //Binary Search Loop
        while(start<=end)
        {
            int mid =start + (end-start)/2; //calculate mid index

            //check if the middle is greater or equal to target
            if(nums[mid]>=target){
                ans=mid; //update the answer to mid
                end=mid-1; //move end pointer left
            }else{
                start=mid+1; //move start pointer right
            } 
        }
        return ans; //return the index where the target should be inserted
    }
}
