Minimum Number of Days to Make m Bouquets

You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
Example 2:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.
Example 3:

Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets each should have 3 flowers.
Here is the garden after the 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.
After day 12: [x, x, x, x, x, x, x]
It is obvious that we can make two bouquets in different ways.

CODE:
class Solution {

    public static int countBouquetsBYDays(int[] bloomDay,int bouquetSize,int targetDay){
        int bouquetCount=0;
        int consecutiveFlowers=0;

        for(int currDay:bloomDay){
            if(currDay<= targetDay){
                consecutiveFlowers++; //increase count

                //if we have enough consecutive flowers for a bouquet
                if(consecutiveFlowers>=bouquetSize){
                    bouquetCount++;   //count this bouquet
                    consecutiveFlowers=0;   //rest for the next bouquet
                }
            }
            else{
                consecutiveFlowers=0;  //reset if the flower doesn't bloom by targetDay
            }
        }
        return bouquetCount;  //return the total bouquets
    }

    public int minDays(int[] bloomDay, int totalBouquets, int bouquetSize) {

        int totalFlowers=bloomDay.length;
        //edge case: not enough flowers
        if((long)totalBouquets*bouquetSize > totalFlowers) return -1;

        int minBloomDay=Integer.MAX_VALUE;
        int maxBloomDay=Integer.MIN_VALUE;

        //Find the min and max bloom days
        for(int day:bloomDay){
            minBloomDay=Math.min(minBloomDay,day);
            maxBloomDay=Math.max(maxBloomDay,day);
        }
        int start=minBloomDay;  //Start of binary search range
        int end=maxBloomDay;    //end of binary search range

        //binary search to find the minimum days needed
        while(start<=end)
        {
            int mid=start+(end-start)/2;

            int bouquetCount=countBouquetsBYDays(bloomDay,bouquetSize,mid);

            //if we can make at least the required bouquets
            if(bouquetCount >=totalBouquets){
                end=mid-1;  //try for fewer days
            }
            else{
                start=mid+1;  //need more days
            }
        }
        return start; //the minimum required days
    }
}
